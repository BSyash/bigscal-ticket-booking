{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\apas\\\\Desktop\\\\p\\\\bus_ticket_booking\\\\src\\\\Buses\\\\Bus.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { emptySeats, getdataOfUsers, removeSeats, seats } from '../Features/BusTicketslice';\nimport swal from 'sweetalert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Bus = _ref => {\n  _s();\n\n  var _ticketDetails$filter;\n\n  let {\n    ticketData\n  } = _ref;\n  const dispatch = useDispatch();\n  const selectedSit = useSelector(state => state.busTicket.selectedSeats);\n  const ticketDetails = useSelector(state => state.busTicket.ticketDetails);\n  const [seat, setseats] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\n  const history = useHistory();\n\n  const selectseat = e => {\n    const className = e.target.className;\n\n    if (className == 'whitebox') {\n      const id = e.target.value;\n      dispatch(seats(id));\n      e.target.classList = 'greenbox';\n    } else {\n      e.target.className = 'whitebox';\n      const id = e.target.value;\n      const filter = selectedSit.filter(val => {\n        return val != id;\n      });\n      dispatch(removeSeats(filter));\n    }\n  };\n\n  let selectedSits = [];\n  const TicketDate = ticketDetails === null || ticketDetails === void 0 ? void 0 : (_ticketDetails$filter = ticketDetails.filter(Details => (Details === null || Details === void 0 ? void 0 : Details.date) == (ticketData === null || ticketData === void 0 ? void 0 : ticketData.date) && (Details === null || Details === void 0 ? void 0 : Details.pickupPoint) == (ticketData === null || ticketData === void 0 ? void 0 : ticketData.pickupPoint) && (Details === null || Details === void 0 ? void 0 : Details.dropPoint) == (ticketData === null || ticketData === void 0 ? void 0 : ticketData.dropPoint) && (Details === null || Details === void 0 ? void 0 : Details.acnonac) == (ticketData === null || ticketData === void 0 ? void 0 : ticketData.acnonac))) === null || _ticketDetails$filter === void 0 ? void 0 : _ticketDetails$filter.map(items => selectedSits.push(...items.selectedSeats));\n\n  const Confirmseats = () => {\n    dispatch(getdataOfUsers({ ...ticketData,\n      selectedSeats: selectedSit\n    }));\n    dispatch(emptySeats());\n    swal({\n      title: \"Your Sit Booked Success!\",\n      text: \"Enjoy Your Journey!\",\n      icon: \"success\",\n      button: \"welCome!\"\n    });\n    history.push('/ticket');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"busSeats\",\n      children: seat.map((val, id) => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"whitebox\",\n          value: val,\n          onClick: e => selectseat(e),\n          outline: true,\n          disabled: selectedSits === null || selectedSits === void 0 ? void 0 : selectedSits.includes(String(val)),\n          children: val\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => Confirmseats(),\n      children: \"Confirm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Bus, \"y9rvTmWaQKJ/l8CNRSdooaes+zc=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useHistory];\n});\n\n_c = Bus;\nexport default Bus;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bus\");","map":{"version":3,"sources":["C:/Users/apas/Desktop/p/bus_ticket_booking/src/Buses/Bus.js"],"names":["React","useState","useDispatch","useSelector","useHistory","emptySeats","getdataOfUsers","removeSeats","seats","swal","Bus","ticketData","dispatch","selectedSit","state","busTicket","selectedSeats","ticketDetails","seat","setseats","history","selectseat","e","className","target","id","value","classList","filter","val","selectedSits","TicketDate","Details","date","pickupPoint","dropPoint","acnonac","map","items","push","Confirmseats","title","text","icon","button","includes","String"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { emptySeats, getdataOfUsers, removeSeats, seats } from '../Features/BusTicketslice'\r\nimport swal from 'sweetalert';\r\n\r\n\r\nconst Bus = ({ ticketData }) => {\r\n    const dispatch = useDispatch()\r\n    const selectedSit = useSelector(state => state.busTicket.selectedSeats)\r\n    const ticketDetails = useSelector(state => state.busTicket.ticketDetails)\r\n\r\n    const [seat, setseats] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\r\n    const history = useHistory()\r\n\r\n    const selectseat = (e) => {\r\n\r\n        const className = e.target.className\r\n        if (className == 'whitebox') {\r\n            const id = e.target.value\r\n            dispatch(seats(id))\r\n            e.target.classList = 'greenbox'\r\n        } else {\r\n            e.target.className = 'whitebox'\r\n            const id = e.target.value\r\n            const filter = selectedSit.filter(\r\n                (val) => {\r\n                    return (val != id)\r\n                }\r\n            )\r\n            dispatch(removeSeats(filter))\r\n        }\r\n    }\r\n    let selectedSits = []\r\n    const TicketDate = ticketDetails?.filter((Details) => (\r\n        Details?.date == ticketData?.date && Details?.pickupPoint == ticketData?.pickupPoint &&  Details?.dropPoint == ticketData?.dropPoint && Details?.acnonac == ticketData?.acnonac\r\n    ))?.map(items => selectedSits.push(...items.selectedSeats))\r\n    \r\n\r\n\r\n    const Confirmseats = () => {\r\n        dispatch(getdataOfUsers({ ...ticketData, selectedSeats: selectedSit }))\r\n        dispatch(emptySeats())\r\n        swal({\r\n            title: \"Your Sit Booked Success!\",\r\n            text: \"Enjoy Your Journey!\",\r\n            icon: \"success\",\r\n            button: \"welCome!\",\r\n        })\r\n        history.push('/ticket')\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <div className='busSeats'>\r\n                {seat.map((val, id) => {\r\n\r\n\r\n                    return (<button className='whitebox' value={val} onClick={(e) => selectseat(e)} key={id} outline disabled={selectedSits?.includes(String(val))}  >{val}</button>)\r\n                })}\r\n            </div>\r\n            <button onClick={() => Confirmseats()}>Confirm</button>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Bus\r\n"]},"metadata":{},"sourceType":"module"}